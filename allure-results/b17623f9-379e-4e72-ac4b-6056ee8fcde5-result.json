{"name": "Validate Accounts page object ", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "@allure.title(\"Validate Accounts page object \")\n    def test_LeftPanel ():\n        try:\n    \n            LaunchBrowser()\n            fn_CaptureScreenShot(\"Pass\",\"After Browser Launch\")\n            fn_rptStepDetails(\"Pass\", \"Browser Launched Successfully\")\n            sleep(2)\n>           fn_ClickHomeLink()\n\nTC04_Accounts.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (), kw = {}, __tracebackhide__ = True, params = OrderedDict(), args = []\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\nc:\\python36\\lib\\site-packages\\allure_commons\\_allure.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @allure.step(\"Clicked on Home link in left panel\")\n    def fn_ClickHomeLink():\n        Browser.find_element_by_xpath(\"(//*[@title='Go to home page'])[1]\").click()\n>       fn_objExist(Browser.find_element_by_xpath(\"//span[contains(text(),'Trox Field Sales Dashboard')]\"))\n\n..\\..\\Commonfunction.py:232: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrwObj = <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"d29d23d4-2694-497d-a712-4ca95e58bddf\")>\n\n    def fn_objExist(brwObj):\n        intcount =0\n        while True:\n            try:\n>               if brwObj.is_displayed() or brwObj.is_enabled() == True:\n\n..\\..\\Commonfunction.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"d29d23d4-2694-497d-a712-4ca95e58bddf\")>\n\n    def is_displayed(self):\n        \"\"\"Whether the element is visible to a user.\"\"\"\n        # Only go into this conditional for browsers that don't use the atom themselves\n        if self._w3c:\n            return self.parent.execute_script(\n                \"return (%s).apply(null, arguments);\" % isDisplayed_js,\n>               self)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3c57467992285bccd570446003eebf0e\")>\nscript = 'return (function(){return function(){var k=this;function l(a){return void 0!==a}function m(a){return\"string\"==typeof ...ow.navigator:null,document:typeof window!=\\'undefined\\'?window.document:null}, arguments);}\\n).apply(null, arguments);'\nargs = (<selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"d29d23d4-2694-497d-a712-4ca95e58bddf\")>,)\nconverted_args = [<selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"d29d23d4-2694-497d-a712-4ca95e58bddf\")>]\ncommand = 'w3cExecuteScript'\n\n    def execute_script(self, script, *args):\n        \"\"\"\n        Synchronously Executes JavaScript in the current window/frame.\n    \n        :Args:\n         - script: The JavaScript to execute.\n         - \\*args: Any applicable arguments for your JavaScript.\n    \n        :Usage:\n            driver.execute_script('return document.title;')\n        \"\"\"\n        converted_args = list(args)\n        command = None\n        if self.w3c:\n            command = Command.W3C_EXECUTE_SCRIPT\n        else:\n            command = Command.EXECUTE_SCRIPT\n    \n        return self.execute(command, {\n            'script': script,\n>           'args': converted_args})['value']\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:636: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3c57467992285bccd570446003eebf0e\")>\ndriver_command = 'w3cExecuteScript'\nparams = {'args': [{'ELEMENT': 'd29d23d4-2694-497d-a712-4ca95e58bddf', 'element-6066-11e4-a52e-4f735466cecf': 'd29d23d4-2694-49...w.navigator:null,document:typeof window!=\\'undefined\\'?window.document:null}, arguments);}\\n).apply(null, arguments);'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000003C7DFD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...x756B343D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77589812+99]\\\\n\\\\tRtlInitializeExceptionChain [0x775897E5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=86.0.4240.183)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Validate Accounts page object \")\n    def test_LeftPanel ():\n        try:\n    \n            LaunchBrowser()\n            fn_CaptureScreenShot(\"Pass\",\"After Browser Launch\")\n            fn_rptStepDetails(\"Pass\", \"Browser Launched Successfully\")\n            sleep(2)\n            fn_ClickHomeLink()\n            fn_ClickRecentLink()\n            fn_ClickDashboardsLink()\n            fn_ClickActivitiesLink()\n            fn_ClickAccountsLink()\n            fn_ClickContactsLink()\n            fn_ClickOpportunitiesLink()\n            fn_ClickQuotesLink()\n            fn_CaptureScreenShot(\"Pass\", \"Completed !!!\")\n            assert True\n            fn_closeBrowser()\n        except:\n            fn_CaptureScreenShot(\"Fail\", \"Unknown error look for error in report\")\n>           assert False\nE           assert False\n\nTC04_Accounts.py:34: AssertionError"}, "steps": [{"name": "Browser Launched", "status": "passed", "steps": [{"name": "'Pass','Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"0fbbcda4-5283-44e4-a30d-45c041f061d6\")>'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"0fbbcda4-5283-44e4-a30d-45c041f061d6\")>'"}], "start": 1604749648853, "stop": 1604749648853}, {"name": "'Pass','Login details entered & clicked on login button'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Login details entered & clicked on login button'"}], "start": 1604749651193, "stop": 1604749651193}, {"name": "'Pass','Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"0366ccf7-9fe2-4c3d-bb42-3cf59fd122d1\")>'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"0366ccf7-9fe2-4c3d-bb42-3cf59fd122d1\")>'"}], "start": 1604749653467, "stop": 1604749653467}, {"name": "'Pass','Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"effa3aa7-2848-4755-8f43-1e176ec6d91b\")>'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"effa3aa7-2848-4755-8f43-1e176ec6d91b\")>'"}], "start": 1604749655605, "stop": 1604749655605}, {"name": "'Pass','Clicked on sign on button'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Clicked on sign on button'"}], "start": 1604749657905, "stop": 1604749657905}, {"name": "'Pass','Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"8f81da3a-5aba-40c1-95f8-81413059d83b\")>'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"8f81da3a-5aba-40c1-95f8-81413059d83b\")>'"}], "start": 1604749658022, "stop": 1604749658022}, {"name": "'Pass','Clicked on NO Button in the popup'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Clicked on NO Button in the popup'"}], "start": 1604749670459, "stop": 1604749670459}, {"name": "'Pass','Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"97ba0bc0-bc1b-4df2-a0af-fff826669ed0\")>'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist on page <selenium.webdriver.remote.webelement.WebElement (session=\"3c57467992285bccd570446003eebf0e\", element=\"97ba0bc0-bc1b-4df2-a0af-fff826669ed0\")>'"}], "start": 1604749672332, "stop": 1604749672332}, {"name": "'Pass','Logged into application!!!'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Logged into application!!!'"}], "start": 1604749697419, "stop": 1604749697419}], "start": 1604749629251, "stop": 1604749697419}, {"name": "*******ScreenShot 'After Browser Launch' **********", "status": "passed", "steps": [{"name": "'Pass','After Browser Launch'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'After Browser Launch'"}], "start": 1604749698015, "stop": 1604749698015}], "attachments": [{"name": "After Browser Launch", "source": "6aeb3f1a-e89e-490b-a1da-cbadce88ce59-attachment.PNG"}], "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'After Browser Launch'"}], "start": 1604749698015, "stop": 1604749698017}, {"name": "'Pass','Browser Launched Successfully'", "status": "passed", "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Browser Launched Successfully'"}], "start": 1604749698018, "stop": 1604749698018}, {"name": "Clicked on Home link in left panel", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=86.0.4240.183)\n\n", "trace": "  File \"c:\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\DELL\\eclipse-workspace\\CDI\\Commonfunction.py\", line 232, in fn_ClickHomeLink\n    fn_objExist(Browser.find_element_by_xpath(\"//span[contains(text(),'Trox Field Sales Dashboard')]\"))\n  File \"C:\\Users\\DELL\\eclipse-workspace\\CDI\\Commonfunction.py\", line 48, in fn_objExist\n    if brwObj.is_displayed() or brwObj.is_enabled() == True:\n  File \"c:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 488, in is_displayed\n    self)\n  File \"c:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 636, in execute_script\n    'args': converted_args})['value']\n  File \"c:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1604749700018, "stop": 1604749700499}, {"name": "*******ScreenShot 'Unknown error look for error in report' **********", "status": "passed", "attachments": [{"name": "Unknown error look for error in report", "source": "e4988890-1c96-432b-b604-467ff771bda1-attachment.PNG"}], "parameters": [{"name": "TestStatus", "value": "'Fail'"}, {"name": "TestStep", "value": "'Unknown error look for error in report'"}], "start": 1604749701940, "stop": 1604749701943}], "attachments": [{"name": "stdout", "source": "e0effd3d-3ee4-4855-a436-548f97c41a5c-attachment.txt", "type": "text/plain"}], "start": 1604749629250, "stop": 1604749701944, "uuid": "f292301b-79b7-4587-8cb0-8ae3bd0c0f8a", "historyId": "938ea0f0617aadc76e1f858f21aafa30", "testCaseId": "cd2ca439d427cd29863b796d22ffe827", "fullName": "scr.Accounts.TC04_Accounts#test_LeftPanel", "labels": [{"name": "parentSuite", "value": "scr.Accounts"}, {"name": "suite", "value": "TC04_Accounts"}, {"name": "host", "value": "GOOGLE"}, {"name": "thread", "value": "6628-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scr.Accounts.TC04_Accounts"}]}