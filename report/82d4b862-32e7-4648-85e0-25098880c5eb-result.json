{"name": "test_Accounts", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000000003C9D7B8>\nconn = <urllib3.connection.HTTPConnection object at 0x0000000003C9D898>, method = 'POST'\nurl = '/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'\ntimeout = <urllib3.util.timeout.Timeout object at 0x0000000003CC34A8>, chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'headers': {'Accept': 'application/json', 'Co...n': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x0000000003CC3550>\nread_timeout = <object object at 0x000000000036A290>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls httplib.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        if chunked:\n            conn.request_chunked(method, url, **httplib_request_kw)\n        else:\n            conn.request(method, url, **httplib_request_kw)\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, 'sock', None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout)\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:  # Python 2.7, use buffering of HTTP responses\n>               httplib_response = conn.getresponse(buffering=True)\nE               TypeError: getresponse() got an unexpected keyword argument 'buffering'\n\nc:\\python36\\lib\\site-packages\\urllib3\\connectionpool.py:377: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <socket.SocketIO object at 0x0000000003C91588>, b = <memory at 0x0000000003B1AB88>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\n\nc:\\python36\\lib\\socket.py:586: ConnectionResetError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.step('Browser Launched')\n    def LaunchBrowser():\n        try:\n            winName = getWindowName()\n            Browser.switch_to.window(winName[1])\n            Browser.close()\n            Browser.switch_to.window(winName[0])\n            Browser.get(\"https://tcdi-test.crm.dynamics.com/main.aspx?forceUCI=1&pagetype=apps\")\n            sleep(5)\n            fn_objExist(Browser.find_element_by_name(\"loginfmt\"))\n            Browser.find_element_by_id(\"i0116\").send_keys(\"test.fieldsales@cditechnologies.com\")\n            sleep(5)\n>           WebDriverWait(Browser,140).until(EC.element_to_be_clickable((By.ID,\"idSIButton9\")))\n\n..\\..\\Commonfunction.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x0000000003C9D668>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x0000000003C9D668>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\n\n    def __call__(self, driver):\n>       element = visibility_of_element_located(self.locator)(driver)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000000003CC3278>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\n\n    def __call__(self, driver):\n        try:\n>           return _element_if_visible(_find_element(driver, self.locator))\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\nby = ('id', 'idSIButton9')\n\n    def _find_element(driver, by):\n        \"\"\"Looks up an element. Logs and re-raises ``WebDriverException``\n        if thrown.\"\"\"\n        try:\n>           return driver.find_element(*by)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\nby = 'css selector', value = '[id=\"idSIButton9\"]'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a799d6ee299d9f0a8e8e9e7b6bf219\")>\ndriver_command = 'findElement', params = {'using': 'css selector', 'value': '[id=\"idSIButton9\"]'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.remote_connection.ChromeRemoteConnection object at 0x0000000003C911D0>\ncommand = 'findElement', params = {'using': 'css selector', 'value': '[id=\"idSIButton9\"]'}\n\n    def execute(self, command, params):\n        \"\"\"\n        Send a command to the remote server.\n    \n        Any path subtitutions required for the URL mapped to the command should be\n        included in the command parameters.\n    \n        :Args:\n         - command - A string specifying the command to execute.\n         - params - A dictionary of named parameters to send with the command as\n           its JSON payload.\n        \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        path = string.Template(command_info[1]).substitute(params)\n        if hasattr(self, 'w3c') and self.w3c and isinstance(params, dict) and 'sessionId' in params:\n            del params['sessionId']\n        data = utils.dump_json(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.remote_connection.ChromeRemoteConnection object at 0x0000000003C911D0>\nmethod = 'POST', url = 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'\nbody = '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n        Send an HTTP request to the remote server.\n    \n        :Args:\n         - method - A string for the HTTP method to send the request with.\n         - url - A string for the URL to send the request to.\n         - body - A string for request body. Ignored unless method is POST or PUT.\n    \n        :Returns:\n          A dictionary with the server's parsed JSON response.\n        \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n        headers = self.get_remote_connection_headers(parsed_url, self.keep_alive)\n        resp = None\n        if body and method != 'POST' and method != 'PUT':\n            body = None\n    \n        if self.keep_alive:\n>           resp = self._conn.request(method, url, body=body, headers=headers)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000000003C91128>, method = 'POST'\nurl = 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element', fields = None\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}\nurlopen_kw = {'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'request_url': 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'}\n\n    def request(self, method, url, fields=None, headers=None, **urlopen_kw):\n        \"\"\"\n        Make a request using :meth:`urlopen` with the appropriate encoding of\n        ``fields`` based on the ``method`` used.\n    \n        This is a convenience method that requires the least amount of manual\n        effort. It can be used in most situations, while still having the\n        option to drop down to more specific methods when necessary, such as\n        :meth:`request_encode_url`, :meth:`request_encode_body`,\n        or even the lowest level :meth:`urlopen`.\n        \"\"\"\n        method = method.upper()\n    \n        urlopen_kw['request_url'] = url\n    \n        if method in self._encode_url_methods:\n            return self.request_encode_url(method, url, fields=fields,\n                                           headers=headers,\n                                           **urlopen_kw)\n        else:\n            return self.request_encode_body(method, url, fields=fields,\n                                            headers=headers,\n>                                           **urlopen_kw)\n\nc:\\python36\\lib\\site-packages\\urllib3\\request.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000000003C91128>, method = 'POST'\nurl = 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element', fields = None\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}\nencode_multipart = True, multipart_boundary = None\nurlopen_kw = {'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'request_url': 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'}\nextra_kw = {'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'headers': {'Accept': 'application/json', 'Co...m/3.141.0 (python windows)'}, 'request_url': 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'}\n\n    def request_encode_body(self, method, url, fields=None, headers=None,\n                            encode_multipart=True, multipart_boundary=None,\n                            **urlopen_kw):\n        \"\"\"\n        Make a request using :meth:`urlopen` with the ``fields`` encoded in\n        the body. This is useful for request methods like POST, PUT, PATCH, etc.\n    \n        When ``encode_multipart=True`` (default), then\n        :meth:`urllib3.filepost.encode_multipart_formdata` is used to encode\n        the payload with the appropriate content type. Otherwise\n        :meth:`urllib.urlencode` is used with the\n        'application/x-www-form-urlencoded' content type.\n    \n        Multipart encoding must be used when posting files, and it's reasonably\n        safe to use it in other times too. However, it may break request\n        signing, such as with OAuth.\n    \n        Supports an optional ``fields`` parameter of key/value strings AND\n        key/filetuple. A filetuple is a (filename, data, MIME type) tuple where\n        the MIME type is optional. For example::\n    \n            fields = {\n                'foo': 'bar',\n                'fakefile': ('foofile.txt', 'contents of foofile'),\n                'realfile': ('barfile.txt', open('realfile').read()),\n                'typedfile': ('bazfile.bin', open('bazfile').read(),\n                              'image/jpeg'),\n                'nonamefile': 'contents of nonamefile field',\n            }\n    \n        When uploading a file, providing a filename (the first parameter of the\n        tuple) is optional but recommended to best mimic behavior of browsers.\n    \n        Note that if ``headers`` are supplied, the 'Content-Type' header will\n        be overwritten because it depends on the dynamic random boundary string\n        which is used to compose the body of the request. The random boundary\n        string can be explicitly set with the ``multipart_boundary`` parameter.\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        extra_kw = {'headers': {}}\n    \n        if fields:\n            if 'body' in urlopen_kw:\n                raise TypeError(\n                    \"request got values for both 'fields' and 'body', can only specify one.\")\n    \n            if encode_multipart:\n                body, content_type = encode_multipart_formdata(fields, boundary=multipart_boundary)\n            else:\n                body, content_type = urlencode(fields), 'application/x-www-form-urlencoded'\n    \n            extra_kw['body'] = body\n            extra_kw['headers'] = {'Content-Type': content_type}\n    \n        extra_kw['headers'].update(headers)\n        extra_kw.update(urlopen_kw)\n    \n>       return self.urlopen(method, url, **extra_kw)\n\nc:\\python36\\lib\\site-packages\\urllib3\\request.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000000003C91128>, method = 'POST'\nurl = 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element', redirect = True\nkw = {'assert_same_host': False, 'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'headers': {'Accep...nt-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}, 'redirect': False, ...}\nu = Url(scheme='http', auth=None, host='127.0.0.1', port=54581, path='/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element', query=None, fragment=None)\nconn = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000000003C9D7B8>\n\n    def urlopen(self, method, url, redirect=True, **kw):\n        \"\"\"\n        Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`\n        with custom cross-host redirect logic and only sends the request-uri\n        portion of the ``url``.\n    \n        The given ``url`` parameter must be absolute, such that an appropriate\n        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.\n        \"\"\"\n        u = parse_url(url)\n        conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n    \n        kw['assert_same_host'] = False\n        kw['redirect'] = False\n    \n        if 'headers' not in kw:\n            kw['headers'] = self.headers.copy()\n    \n        if self.proxy is not None and u.scheme == \"http\":\n            response = conn.urlopen(method, url, **kw)\n        else:\n>           response = conn.urlopen(method, u.request_uri, **kw)\n\nc:\\python36\\lib\\site-packages\\urllib3\\poolmanager.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000000003C9D7B8>, method = 'POST'\nurl = '/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'\nbody = '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <object object at 0x000000000036A920>, pool_timeout = None, release_conn = True\nchunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://127.0.0.1:54581/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x0000000003CC34A8>, is_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nc:\\python36\\lib\\site-packages\\urllib3\\connectionpool.py:600: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000000003C9D7B8>\nconn = <urllib3.connection.HTTPConnection object at 0x0000000003C9D898>, method = 'POST'\nurl = '/session/41a799d6ee299d9f0a8e8e9e7b6bf219/element'\ntimeout = <urllib3.util.timeout.Timeout object at 0x0000000003CC34A8>, chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"css selector\", \"value\": \"[id=\\\\\"idSIButton9\\\\\"]\"}', 'headers': {'Accept': 'application/json', 'Co...n': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python windows)'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x0000000003CC3550>\nread_timeout = <object object at 0x000000000036A290>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls httplib.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        if chunked:\n            conn.request_chunked(method, url, **httplib_request_kw)\n        else:\n            conn.request(method, url, **httplib_request_kw)\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, 'sock', None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout)\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:  # Python 2.7, use buffering of HTTP responses\n                httplib_response = conn.getresponse(buffering=True)\n            except TypeError:  # Python 2.6 and older, Python 3\n                try:\n>                   httplib_response = conn.getresponse()\n\nc:\\python36\\lib\\site-packages\\urllib3\\connectionpool.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x0000000003C9D898>\n\n    def getresponse(self):\n        \"\"\"Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        the response_class variable.\n    \n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        \"\"\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady(self.__state)\n    \n        if self.debuglevel > 0:\n            response = self.response_class(self.sock, self.debuglevel,\n                                           method=self._method)\n        else:\n            response = self.response_class(self.sock, method=self._method)\n    \n        try:\n            try:\n>               response.begin()\n\nc:\\python36\\lib\\http\\client.py:1331: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x0000000003C9DBE0>\n\n    def begin(self):\n        if self.headers is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\nc:\\python36\\lib\\http\\client.py:297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x0000000003C9DBE0>\n\n    def _read_status(self):\n>       line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n\nc:\\python36\\lib\\http\\client.py:258: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x0000000003C91588>, b = <memory at 0x0000000003B1AB88>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               KeyboardInterrupt\n\nc:\\python36\\lib\\socket.py:586: KeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_Accounts ():\n        try:\n            rptTC_Title(\"Validate Accounts navigation & verify page object \")\n>           LaunchBrowser()\n\nTC01_Accounts.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (), kw = {}, __tracebackhide__ = True, params = OrderedDict(), args = []\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\nc:\\python36\\lib\\site-packages\\allure_commons\\_allure.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @allure.step('Browser Launched')\n    def LaunchBrowser():\n        try:\n            winName = getWindowName()\n            Browser.switch_to.window(winName[1])\n            Browser.close()\n            Browser.switch_to.window(winName[0])\n            Browser.get(\"https://tcdi-test.crm.dynamics.com/main.aspx?forceUCI=1&pagetype=apps\")\n            sleep(5)\n            fn_objExist(Browser.find_element_by_name(\"loginfmt\"))\n            Browser.find_element_by_id(\"i0116\").send_keys(\"test.fieldsales@cditechnologies.com\")\n            sleep(5)\n            WebDriverWait(Browser,140).until(EC.element_to_be_clickable((By.ID,\"idSIButton9\")))\n            Browser.find_element_by_id(\"idSIButton9\").click()\n            rptStepDetails(\"Pass\", \"Login details entered & clicked on login button\")\n            WebDriverWait(Browser,140).until(EC.element_to_be_clickable((By.ID,\"i0118\")))\n            fn_objExist(Browser.find_element_by_id(\"i0118\"))\n            Browser.find_element_by_id(\"i0118\").send_keys(\"Tr0x@CRM\")\n            sleep(5)\n            fn_objExist(Browser.find_element_by_id(\"idSIButton9\"))\n            Browser.find_element_by_id(\"idSIButton9\").click()\n            rptStepDetails(\"Pass\",\"Clicked on sign on button\")\n            fn_objExist(Browser.find_element_by_id(\"idBtn_Back\"))\n            Browser.find_element_by_id(\"idBtn_Back\").click()\n            sleep(10)\n            rptStepDetails(\"Pass\", \"Clicked on NO Button in the popup\")\n            WebDriverWait(Browser,240).until(EC.element_to_be_clickable((By.ID,\"AppLandingPage\")))\n            fn_objExist(Browser.find_element_by_id(\"AppLandingPage\"))\n            Browser.switch_to.frame(\"AppLandingPage\")\n            fn_objExist(Browser.find_element_by_xpath('//*[@id=\"AppDetailsSec_1_Item_1\"]/div[1]'))\n            Browser.find_element_by_xpath('//*[@id=\"AppDetailsSec_1_Item_1\"]/div[1]').click()\n            Browser.switch_to.window(winName[0])\n            sleep(20)\n            print(\"Browser Launch completed !!!!\")\n    \n            assert len(winName[0])>0\n        except:\n>           assert False\nE           AssertionError\n\n..\\..\\Commonfunction.py:115: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_Accounts ():\n        try:\n            rptTC_Title(\"Validate Accounts navigation & verify page object \")\n            LaunchBrowser()\n            rptStepDetails(\"Pass\", \"Browser Launched Successfully\")\n            sleep(2)\n            fn_NavigateTo_AccountsPage()\n            fn_NavigateTo_QuotesPage()\n            fn_ClickOnNewQuote()\n    #         fn_VerifyQuotePage()\n            fn_EnterQuoteSummaryInfo()\n            sleep(random.randint(0,15))\n            fn_Click_Save_OnHeader()\n            print(\"completed\")\n            assert True\n        except:\n>           rptStepDetails(\"Fail\", \"Unknown error look for error in report\")\n\nTC01_Accounts.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nTestStatus = 'Fail', TestStep = 'Unknown error look for error in report'\n\n    @allure.step(\"{TestStatus},{TestStep}\")\n    def rptStepDetails(TestStatus=None,TestStep=None):\n        if TestStatus == \"Pass\" or TestStatus ==\"pass\":\n            allure.attach.file(\"C:/Users/DELL/Downloads/image.png\", \"ScreenShot\", attachment_type=None, extension=\"PNG\")\n            assert True\n        else:\n            allure.attach.file(\"C:/Users/DELL/Downloads/image.png\", \"ScreenShot\", attachment_type=None, extension=\"PNG\")\n>           assert False\nE           AssertionError\n\n..\\..\\ReportFunction.py:19: AssertionError"}, "steps": [{"name": "Browser Launched", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"c:\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\DELL\\eclipse-workspace\\CDI\\Commonfunction.py\", line 115, in LaunchBrowser\n    assert False\n"}, "steps": [{"name": "'Pass','Object exist hence exiting'", "status": "passed", "attachments": [{"name": "ScreenShot", "source": "8240e7b9-74e9-4dcc-bbbe-2863eb370cab-attachment.PNG"}], "parameters": [{"name": "TestStatus", "value": "'Pass'"}, {"name": "TestStep", "value": "'Object exist hence exiting'"}], "start": 1599995781558, "stop": 1599995781561}], "start": 1599995767981, "stop": 1599995786773}, {"name": "'Fail','Unknown error look for error in report'", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"c:\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\DELL\\eclipse-workspace\\CDI\\ReportFunction.py\", line 19, in rptStepDetails\n    assert False\n"}, "attachments": [{"name": "ScreenShot", "source": "bc28f5bf-dc78-48a8-a47a-fabab92243ae-attachment.PNG"}], "parameters": [{"name": "TestStatus", "value": "'Fail'"}, {"name": "TestStep", "value": "'Unknown error look for error in report'"}], "start": 1599995786854, "stop": 1599995786856}], "start": 1599995767981, "stop": 1599995786859, "uuid": "386cbec1-d4ca-4eb2-9298-558859ca303f", "historyId": "1308f9c3f65abc16844080ba636a349e", "testCaseId": "915d1631ed0ced950e6348799c47ffc5", "fullName": "scr.Accounts.TC01_Accounts#test_Accounts", "labels": [{"name": "parentSuite", "value": "scr.Accounts"}, {"name": "suite", "value": "TC01_Accounts"}, {"name": "host", "value": "GOOGLE"}, {"name": "thread", "value": "1072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scr.Accounts.TC01_Accounts"}]}